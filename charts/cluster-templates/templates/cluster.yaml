apiVersion: provisioning.cattle.io/v1
kind: Cluster
metadata:
  {{- if .Values.cluster.labels }}
  labels:
{{ toYaml .Values.cluster.labels | indent 4 }}
  {{- end }}
  {{- if .Values.cluster.annotations }}
  annotations:
{{ toYaml .Values.cluster.annotations | indent 4 }}
  {{- end }}
  name: {{ .Values.cluster.name }}
  namespace: fleet-default
spec:
  {{- if .Values.cluster.config.agentEnvs }}
  agentEnvVars:
{{ toYaml .Values.cluster.config.agentEnvs | indent 4 }}
  {{- end }}
  {{- if .Values.cloudCredentialSecretName }}
  cloudCredentialSecretName: cattle-global-data:{{ .Values.cloudCredentialSecretName }}
  {{- end }}
  # clusterAPIConfig:
  # clusterAgentDeploymentCustomization:
  # defaultClusterRoleForProjectMembers:
  # defaultPodSecurityAdmissionConfigurationTemplateName:
  # defaultPodSecurityPolicyTemplateName:
  enableNetworkPolicy: {{ .Values.cluster.config.enableNetworkPolicy }}
  # fleetAgentDeploymentCustomization:
  {{- if .Values.cluster.config.kubernetesVersion }}
  kubernetesVersion: {{ .Values.cluster.config.kubernetesVersion }}
  {{- end }}
  {{- if eq .Values.cluster.config.localClusterAuthEndpoint.enabled true }}
  localClusterAuthEndpoint:
    enabled: {{ .Values.cluster.config.localClusterAuthEndpoint.enabled }}
    fqdn: {{ .Values.cluster.config.localClusterAuthEndpoint.fqdn }}
    caCerts: {{ .Values.cluster.config.localClusterAuthEndpoint.caCerts }}
  {{- else }}
  localClusterAuthEndpoint:
    enabled: false
  {{- end }}
  # redeploySystemAgentGeneration:
  rkeConfig:
    # additionalManifest:
    {{- if eq $.Values.cloudprovider "harvester" }}
    chartValues:
      harvester-cloud-provider:
        cloudConfigPath: /var/lib/rancher/rke2/etc/config-files/cloud-provider-config
        clusterName: {{ .Values.cluster.name }}
    {{- else if eq $.Values.cloudprovider "vsphere" }}
    chartValues:
      rke2-calico: {}
      rancher-vsphere-cpi:
        vCenter:
          host: {{ .Values.vcenter.host }}
          username: {{ .Values.vcenter.username }}
          password: {{ .Values.vcenter.password }}
          labels:
            generate: false
          datacenters: {{ .Values.vcenter.datacenters }}
      rancher-vsphere-csi:
        asyncQueryVolume:
          enabled: {{ .Values.vcenter.vsphere.asyncQueryVolume.enabled | default true }}}
        csiController:
          csiResizer:
            enabled: {{ .Values.vcenter.vsphere.csiController.csiResizer.enabled | default true }}
        improvedVolumeTopology:
          enabled: {{ .Values.vcenter.vsphere.improvedVolumeTopology.enabled | default true }}
        onlineVolumeExtend:
          enabled: {{ .Values.vcenter.vsphere.onlineVolumeExtend.enabled | default true }}
        triggerCsiFullsync:
          enabled: {{ .Values.vcenter.vsphere.triggerCsiFullsync.enabled | default true }}
        vCenter:
          datacenters: {{ .Values.vcenter.datacenters }}
          host: {{ .Values.vcenter.host }}
          username: {{ .Values.vcenter.username }}
          password: {{ .Values.vcenter.password }}
          insecureFlag: {{ .Values.vcenter.skip_tls_verify | default false }}
    {{- end }}
    # etcd:
    # etcdSnapshotCreate:
    # etcdSnapshotRestore:
    # infrastructureRef:
    machineGlobalConfig:
      cni: {{ .Values.cluster.config.cni }}
      disable-kube-proxy: {{ .Values.cluster.config.disable_kube_proxy }}
      etcd-expose-metrics: {{ .Values.cluster.config.etcd_expose_metrics }}
      {{- if .Values.cluster.config.profile }}
      profile: {{ .Values.cluster.config.profile }}
      {{- end }}
      {{- if .Values.cluster.config.kube_controller_manager_arg }}
      kube-controller-manager-arg: {{ .Values.cluster.config.kube_controller_manager_arg | toRawJson }}
      {{- end }}
      {{- if .Values.cluster.config.kube_scheduler_arg }}
      kube-scheduler-arg: {{ .Values.cluster.config.kube_scheduler_arg | toRawJson }}
      {{- end }}
      {{- if .Values.cluster.config.kube_apiserver_arg }}
      kube-apiserver-arg: {{ .Values.cluster.config.kube_apiserver_arg | toRawJson }}
      {{- end }}
      {{- if .Values.cluster.config.kubelet_arg }}
      kubelet-arg: {{ .Values.cluster.config.kubelet_arg | toRawJson }}
      {{- end }}
      {{- if .Values.cluster.config.write_kubeconfig_mode }}
      write-kubeconfig-mode: {{ .Values.cluster.config.write_kubeconfig_mode }}
      {{- end }}
      {{- if .Values.cluster.config.use_service_account_credentials }}
      use-service-account-credentials: {{ .Values.cluster.config.use_service_account_credentials }}
      {{- end }}
    # machinePoolDefaults:
    {{- if ne .Values.cloudprovider "custom" }}
    machinePools:
    {{- if .Values.nodepools }} {{ range $index, $nodepool := .Values.nodepools }}
    - controlPlaneRole: {{ $nodepool.controlplane }}
      etcdRole: {{ $nodepool.etcd }}
      workerRole: {{ $nodepool.worker }}
      quantity: {{ $nodepool.quantity }}
      name: {{ $nodepool.name }}
      machineConfigRef:
        {{- if eq $.Values.cloudprovider "amazonec2" }}
        kind: Amazonec2Config
        {{- else if eq $.Values.cloudprovider "vsphere" }}
        kind: VmwarevsphereConfig
        {{- else if eq $.Values.cloudprovider "harvester" }}
        kind: HarvesterConfig
        {{- else if eq $.Values.cloudprovider "digitalocean" }}
        kind: DigitaloceanConfig
        {{- else if eq $.Values.cloudprovider "azure" }}
        kind: AzureConfig
        {{- end}}
        name: {{ $nodepool.name }}
      paused: {{ $nodepool.paused }}
      displayName: {{ $nodepool.displayName | default $nodepool.name }}
      {{- if $nodepool.rollingUpdate }}
      rollingUpdate:
        maxUnavailable: {{ $nodepool.rollingUpdate.maxUnavailable }}
        maxSurge: {{ $nodepool.rollingUpdate.maxSurge }}
      {{- end }}
      {{- if $nodepool.machineDeploymentLabels }}
      machineDeploymentLabels:
{{ toYaml $nodepool.machineDeploymentLabels | indent 8 }}
      {{- end }}
      {{- if $nodepool.machineDeploymentAnnotations }}
      machineDeploymentAnnotations:
{{ toYaml $nodepool.machineDeploymentAnnotations | indent 8 }}
      {{- end }}
      {{- end }}
    {{- end }}
    {{- if .Values.nodepool }}
    {{ $nodepool := .Values.nodepool }}
    - controlPlaneRole: {{ $nodepool.controlplane }}
      etcdRole: {{ $nodepool.etcd }}
      workerRole: {{ $nodepool.worker }}
      quantity: {{ $nodepool.quantity }}
      name: {{ $nodepool.name }}
      machineConfigRef:
        {{- if eq $.Values.cloudprovider "amazonec2" }}
        kind: Amazonec2Config
        {{- else if eq $.Values.cloudprovider "vsphere" }}
        kind: VmwarevsphereConfig
        {{- else if eq $.Values.cloudprovider "harvester" }}
        kind: HarvesterConfig
        {{- else if eq $.Values.cloudprovider "digitalocean" }}
        kind: DigitaloceanConfig
        {{- else if eq $.Values.cloudprovider "azure" }}
        kind: AzureConfig
        {{- end}}
        name: {{ $nodepool.name }}
      paused: {{ $nodepool.paused }}
      displayName: {{ $nodepool.displayName | default $nodepool.name }}
      {{- if $nodepool.rollingUpdate }}
      rollingUpdate:
        maxUnavailable: {{ $nodepool.rollingUpdate.maxUnavailable }}
        maxSurge: {{ $nodepool.rollingUpdate.maxSurge }}
      {{- end }}
      {{- if $nodepool.machineDeploymentLabels }}
      machineDeploymentLabels:
{{ toYaml $nodepool.machineDeploymentLabels | indent 8 }}
      {{- end }}
      {{- if $nodepool.machineDeploymentAnnotations }}
      machineDeploymentAnnotations:
{{ toYaml $nodepool.machineDeploymentAnnotations | indent 8 }}
      {{- end }}
    {{- end }}
    {{- if eq $.Values.cloudprovider "harvester" }}
    machineSelectorConfig:
    - config:
        cloud-provider-config: {{ .Values.cluster.config.cloud_provider_config | default "secret://harvester" }}
        cloud-provider-name: {{ .Values.cluster.config.cloud_provider_config | default "harvester" }}
        {{- if .Values.cluster.config.systemDefaultRegistry }}
        system-default-registry: {{ .Values.cluster.config.systemDefaultRegistry }}
        {{- end }}
        protect-kernel-defaults: {{ .Values.cluster.config.protect_kernel_defaults }}
        selinux: {{ .Values.cluster.config.selinux }}
    {{- else if eq $.Values.cloudprovider "vsphere" }}
    machineSelectorConfig:
    - config:
        {{- if .Values.cluster.config.cloud_provider_config }}
        cloud-provider-config: {{ .Values.cluster.config.cloud_provider_config }}
        {{- end }}
        cloud-provider-name: {{ .Values.cluster.config.cloud_provider_config | default "vsphere" }}
        {{- if .Values.cluster.config.systemDefaultRegistry }}
        system-default-registry: {{ .Values.cluster.config.systemDefaultRegistry }}
        {{- end }}
        docker: {{ .Values.cluster.config.docker }}
        protect-kernel-defaults: {{ .Values.cluster.config.protect_kernel_defaults }}
        selinux: {{ .Values.cluster.config.selinux }}
    {{- else }}
    machineSelectorConfig:
    - config:
        {{- if .Values.cluster.config.cloud_provider_config }}
        cloud-provider-config: {{ .Values.cluster.config.cloud_provider_config }}
        {{- end }}
        cloud-provider-name: {{ .Values.cluster.config.cloud_provider_name }}
        {{- if .Values.cluster.config.systemDefaultRegistry }}
        system-default-registry: {{ .Values.cluster.config.systemDefaultRegistry }}
        {{- end }}
        docker: {{ .Values.cluster.config.docker }}
        protect-kernel-defaults: {{ .Values.cluster.config.protect_kernel_defaults }}
        selinux: {{ .Values.cluster.config.selinux }}
    {{- end }}
    {{- end }}
    # machineSelectorFiles:
    # provisionGeneration:
    {{- if and .Values.cluster.config.registries (eq .Values.cluster.config.registries.enabled true) }}
    registries:
      configs:
        {{- range .Values.cluster.config.registries.configs }}
        {{ .name }}:
          authConfigSecretName: {{ .authConfigSecretName }}
          caBundle: {{ .caBundle }}
          insecureSkipVerify: {{ .insecureSkipVerify }}
          tlsSecretName: {{ .tlsSecretName }}
        {{- end }}
      {{- if .Values.cluster.config.registries.mirrors }}
      mirrors:
        {{- range .Values.cluster.config.registries.mirrors }}
        {{ .name }}:
          endpoint:
            {{- range .endpoint }}
            - {{ . }}
            {{- end }}
        {{- end }}
      {{- end }}
    {{- end }}
    # rotateCertificates:
    # rotateEncryptionKeys:
    {{- if .Values.cluster.config.upgradeStrategy }}
    upgradeStrategy:
      controlPlaneConcurrency: {{ .Values.cluster.config.upgradeStrategy.controlPlaneConcurrency }}
      {{- if eq .Values.cluster.config.upgradeStrategy.controlPlaneDrainOptions.enabled true }}
      controlPlaneDrainOptions:
        enabled: {{ .Values.cluster.config.upgradeStrategy.controlPlaneDrainOptions.enabled }}
        deleteEmptyDirData: {{ .Values.cluster.config.upgradeStrategy.controlPlaneDrainOptions.deleteEmptyDirData }}
        disableEviction: {{ .Values.cluster.config.upgradeStrategy.controlPlaneDrainOptions.disableEviction }}
        force: {{ .Values.cluster.config.upgradeStrategy.controlPlaneDrainOptions.force }}
        gracePeriod: {{ .Values.cluster.config.upgradeStrategy.controlPlaneDrainOptions.gracePeriod }}
        ignoreDaemonSets: {{ .Values.cluster.config.upgradeStrategy.controlPlaneDrainOptions.ignoreDaemonSets }}
        ignoreErrors: {{ .Values.cluster.config.upgradeStrategy.controlPlaneDrainOptions.ignoreErrors }}
        skipWaitForDeleteTimeoutSeconds: {{ .Values.cluster.config.upgradeStrategy.controlPlaneDrainOptions.skipWaitForDeleteTimeoutSeconds }}
        timeout: {{ .Values.cluster.config.upgradeStrategy.controlPlaneDrainOptions.timeout }}
      {{- else }}
      controlPlaneDrainOptions:
        enabled: {{ .Values.cluster.config.upgradeStrategy.controlPlaneDrainOptions.enabled }}
      {{- end }}
      workerConcurrency: {{ .Values.cluster.config.upgradeStrategy.workerConcurrency }}
      {{- if eq .Values.cluster.config.upgradeStrategy.workerDrainOptions.enabled true }}
      workerDrainOptions:
        enabled: {{ .Values.cluster.config.upgradeStrategy.workerDrainOptions.enabled }}
        deleteEmptyDirData: {{ .Values.cluster.config.upgradeStrategy.workerDrainOptions.deleteEmptyDirData }}
        disableEviction: {{ .Values.cluster.config.upgradeStrategy.workerDrainOptions.disableEviction }}
        force: {{ .Values.cluster.config.upgradeStrategy.workerDrainOptions.force }}
        gracePeriod: {{ .Values.cluster.config.upgradeStrategy.workerDrainOptions.gracePeriod }}
        ignoreDaemonSets: {{ .Values.cluster.config.upgradeStrategy.workerDrainOptions.ignoreDaemonSets }}
        ignoreErrors: {{ .Values.cluster.config.upgradeStrategy.workerDrainOptions.ignoreErrors }}
        skipWaitForDeleteTimeoutSeconds: {{ .Values.cluster.config.upgradeStrategy.workerDrainOptions.skipWaitForDeleteTimeoutSeconds }}
        timeout: {{ .Values.cluster.config.upgradeStrategy.workerDrainOptions.timeout }}
      {{- else }}
      workerDrainOptions:
        enabled: {{ .Values.cluster.config.upgradeStrategy.workerDrainOptions.enabled }}
      {{- end }}
    {{- end }}