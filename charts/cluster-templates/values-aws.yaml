# amazonec2, azure, digitalocean, harvester, vsphere, custom
cloudprovider:

# cloud provider credentials (example: aws-creds)
cloudCredentialSecretName:

# rancher manager url
rancher:
  cattle:
    url: # rancher.example.com

# cluster values
cluster:
  # annotations:
    # key: value
  # labels:
    # key: value
  name: rke2-cluster
  config:
    systemDefaultRegistry: docker.io
    kubernetesVersion: v1.25.15+rke2r2
    localClusterAuthEndpoint:
      enabled: false
    # agentEnvVars:
      # - key:value
    cni: canal # canal, calico, cilium, multus,canal, multus,calico, multus,cilium
    docker: false
    disable_kube_proxy: false
    etcd_expose_metrics: false
    enableNetworkPolicy: true
    profile: '' # cis-1.6, cis-1.23
    selinux: false
    secrets_encryption: false
    write_kubeconfig_mode: 0600
    use_service_account_credentials: false
    protect_kernel_defaults: false
    kube_controller_manager_arg:
      # - kube controller manager arguments here (https://kubernetes.io/docs/reference/command-line-tools-reference/kube-controller-manager)
    kube_scheduler_arg:
      # - kube scheduler arguments here (https://kubernetes.io/docs/reference/command-line-tools-reference/kube-scheduler)
    kube_apiserver_arg:
      # - kube apiserver arguments here (https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver)
    kubelet_arg:
      # - kubelet arguments here (https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet)
    registries:
      enabled: false
      # configs:
        # - name: registry.example.com
          # authConfigSecretName: registry-creds
          # caBundle: ''
          # insecureSkipVerify: false
          # tlsSecretName: ''
      # mirrors:
        # - name: docker.io
          # endpoints: ['registry.example.com']
    upgradeStrategy:
      controlPlaneConcurrency: 10%
      controlPlaneDrainOptions:
        enabled: false
        # deleteEmptyDirData: true
        # disableEviction: false
        # force: false
        # gracePeriod: -1
        # ignoreDaemonSets: true
        # ignoreErrors: false
        # skipWaitForDeleteTimeoutSeconds: 0
        # timeout: 120
      workerConcurrency: 10%
      workerDrainOptions:
        enabled: false
        # deleteEmptyDirData: true
        # disableEviction: false
        # force: false
        # gracePeriod: -1
        # ignoreDaemonSets: true
        # ignoreErrors: false
        # skipWaitForDeleteTimeoutSeconds: 0
        # timeout: 120

# node and nodepools values
nodepools:
  - etcd: true
    controlplane: true
    worker: false
    labels: {}
    taints: {}
    quantity: 3
    paused: false
    name: control-plane-nodes
    # accessKey: # only required if not using cloud provider credentials
    # secretKey: # only required if not using cloud provider credentials
    # sessionToken: # only required if not using cloud provider credentials
    ami: # ami id
    # blockDurationMinutes: 0
    deviceName: /dev/sda1
    encryptEbsVolume: false
    # kmsKey: ''
    endpoint: ''
    # httpEndpoint: ''
    # httpTokens: ''
    iamInstanceProfile: '' # iam instance profile name (https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/kubernetes-clusters-in-rancher-setup/set-up-cloud-providers/amazon)
    insecureTransport: false
    instanceType: # instance type
    region: # region
    createSecurityGroup: true
    securityGroups: ['']
    # openPort:
    # - "80"
    # - "443"
    keypairName: ''
    securityGroupReadonly: false
    sshKeyContents: ''
    subnetId: # subnet id
    zone: a
    monitoring: false
    privateAddressOnly: true
    requestSpotInstance: false
    # spotPrice: ''
    tags: provisioner,rancher,KeepRunning,true
    retries: 5
    rootSize: 64
    sshUser: ec2-user
    volumeType: gp3
    vpcId: # vpc id
    useEbsOptimizedInstance: false
    usePrivateAddress: true
    userdata: |
      #cloud-config

  - etcd: false
    controlplane: false
    worker: true
    labels: {}
    taints: {}
    quantity: 3
    paused: false
    name: worker-nodes
    # accessKey: # only required if not using cloud provider credentials
    # secretKey: # only required if not using cloud provider credentials
    # sessionToken: # only required if not using cloud provider credentials
    ami: # ami id
    # blockDurationMinutes: 0
    deviceName: /dev/sda1
    encryptEbsVolume: false
    # kmsKey: ''
    endpoint: ''
    # httpEndpoint: ''
    # httpTokens: ''
    iamInstanceProfile: '' # iam instance profile name
    insecureTransport: false
    instanceType: # instance type
    region: # region
    createSecurityGroup: true
    securityGroups: ['']
    # openPort:
    # - "80"
    # - "443"
    keypairName: ''
    securityGroupReadonly: false
    sshKeyContents: ''
    subnetId: # subnet id
    zone: a
    monitoring: false
    privateAddressOnly: true
    requestSpotInstance: false
    # spotPrice: ''
    tags: provisioner,rancher,KeepRunning,true
    retries: 5
    rootSize: 64
    sshUser: ec2-user
    volumeType: gp3
    vpcId: # vpc id
    useEbsOptimizedInstance: false
    usePrivateAddress: true
    userdata: |
      #cloud-config

# addons values
addons:
  monitoring:
    enabled: false
    # version:
    # values:
      # values here

  longhorn:
    enabled: false
    # version:
    # values:
      # values here

  neuvector:
    enabled: false
    # version:
    # values:
      # values here
